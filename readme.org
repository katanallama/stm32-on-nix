* stm32 on Nix

This is a minimal template for STM32F103RB development with PlatformIO and Emacs.

** Initialization

To use a template, you can use the nix flake init command and specify the template with the --template flag:

#+begin_src sh
nix flake init --template "github:katanallama/stm32-on-nix#stm32-on-nix"
#+end_src

Alternatively, you can use the nix flake new command to create a new flake project in a new directory:

#+begin_src sh
nix flake new --template "github:katanallama/stm32-on-nix#stm32-on-nix" my-project
#+end_src

Ensure that UDEV rules for ~openocd~ are in place and add below to your ~configuration.nix~ or ~flake.nix~
#+begin_src nix
user.extraGroups = [ "plugdev" "dialout" ];
services.udev.packages = [ pkgs.openocd ];
#+end_src
otherwise you have to ~sudo pio run -t upload~

** Usage

~nix develop~: drops you into a shell with the platformIO package and required C dependencies
#+begin_src sh
nix develop
#+end_src

Additional CMSIS header files not found in the platformIO core are in ~./include~, which are helpful for UART/USART

*** Emacs

A ~shellHook~ will initialize the project, this /should/ get you a ~.ccls~ file and cache
#+begin_src sh
pio project init --ide emacs --board nucleo_f103rb
#+end_src

After adding new libs reinitialize project using:
#+begin_src sh
pio project init
#+end_src

Create a ~.compile_commands.json~ file:
#+begin_src sh
pio run --target compiledb
#+end_src

While in a C/C++ buffer, to read ~.compile_commands.json~:
#+begin_src elisp
+cc/reload-compile-db
#+end_src

Restart your lsp server:
#+begin_src elisp
lsp-restart-workspace
#+end_src

** TODO
- Add support for native builds using CMake
- Add UART/USART over onboard ST-Link for Nucleo64 dev boards
